name: hw1-prototype
services:
  nginx:
    image: bitnami/nginx:1.27.0
    #command: [nginx, '-T']
    volumes:
      - ./services/nginx/app.conf:/opt/bitnami/nginx/conf/server_blocks/app.conf
      - ./public:/app
    ports:
      - "8080:80"
      - "8443:443"
      - "8081:81"
    networks:
      - front
      - back
    mem_reservation: 128M
    mem_limit: 512M
    depends_on:
      dialog-service:
        condition: service_started
      user-service-manual-1:
        condition: service_started
      user-service-manual-2:
        condition: service_started

  php-fpm:
    build:
      context: ./services/php-fpm
      dockerfile: php-fpm.Dockerfile
    environment:
      - PHP_FPM_LISTEN_ADDRESS=9000
      - PHP_DATE_TIMEZONE=UTC
      - PHP_ENABLE_OPCACHE=true
    volumes:
      - ./:/app
      - ./services/php-fpm/app-php.ini:/opt/bitnami/php/etc/conf.d/app.ini
      - ./services/php-fpm/pool.www.conf:/opt/bitnami/php/etc/php-fpm.d/www.conf
    networks:
      - front
      - back
      - db-citus

  messenger-worker:
    build:
      context: ./services/php-fpm
      dockerfile: php-fpm.Dockerfile
    working_dir:
      /app
    entrypoint:
      - bin/console
      - messenger:consume
      - async
      - -vv
    environment:
      - PHP_DATE_TIMEZONE=UTC
      - PHP_ENABLE_OPCACHE=true
    volumes:
      - ./:/app
      - ./services/php-fpm/cli.ini:/opt/bitnami/php/etc/conf.d/php.ini
    networks:
      - back
    depends_on:
      redis-queue:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  db:
    image: bitnami/postgresql:16.3.0
    secrets:
      - postgresql-password
      - postgresql-replication-password
    environment:
      - POSTGRESQL_PASSWORD_FILE=/run/secrets/postgresql-password
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD_FILE=/run/secrets/postgresql-replication-password
      - POSTGRESQL_SYNCHRONOUS_REPLICAS_MODE=FIRST
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
    volumes:
      - db-data:/bitnami/postgresql
    networks:
      - back
      - db
    ports:
      - "25432:5432"
    cpus: 2
    mem_reservation: 512M
    mem_limit: 2G

  db-slave1:
    depends_on:
      - db
    image: bitnami/postgresql:16.3.0
    secrets:
      - postgresql-password
      - postgresql-replication-password
    environment:
      - POSTGRESQL_PASSWORD_FILE=/run/secrets/postgresql-password
      - POSTGRESQL_MASTER_HOST=db
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD_FILE=/run/secrets/postgresql-replication-password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
    volumes:
      - db-data-slave1:/bitnami/postgresql
    networks:
      - back
      - db
    ports:
      - '25433:5432'
    cpus: 2
    mem_reservation: 512M
    mem_limit: 2G

  db-slave2:
    depends_on:
      - db
    image: bitnami/postgresql:16.3.0
    secrets:
      - postgresql-password
      - postgresql-replication-password
    environment:
      - POSTGRESQL_PASSWORD_FILE=/run/secrets/postgresql-password
      - POSTGRESQL_MASTER_HOST=db
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD_FILE=/run/secrets/postgresql-replication-password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
    volumes:
      - db-data-slave2:/bitnami/postgresql
    networks:
      - back
      - db
    ports:
      - '25434:5432'
    cpus: 2
    mem_reservation: 512M
    mem_limit: 2G

  db-slave3:
    depends_on:
      - db
    image: bitnami/postgresql:16.3.0
    secrets:
      - postgresql-password
      - postgresql-replication-password
    environment:
      - POSTGRESQL_PASSWORD_FILE=/run/secrets/postgresql-password
      - POSTGRESQL_MASTER_HOST=db
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD_FILE=/run/secrets/postgresql-replication-password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
    volumes:
      - db-data-slave3:/bitnami/postgresql
    networks:
      - back
      - db
    cpus: 2
    mem_reservation: 512M
    mem_limit: 2G

  db-haproxy:
    image: haproxy:3.1
    volumes:
      - ./services/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    networks:
      - db

  redis-cache:
    image: bitnami/redis:6.2
    environment:
      - REDIS_AOF_ENABLED=no
      - REDIS_PASSWORD_FILE=/run/secrets/redis-cache-password
    secrets:
      - redis-cache-password
    networks:
      - back
    ports:
      - '26379:6379'
    cpus: 1
    mem_reservation: 128M
    mem_limit: 128M

  redis-queue:
    image: bitnami/redis:6.2
    environment:
      - REDIS_AOF_ENABLED=no
      - REDIS_PASSWORD_FILE=/run/secrets/redis-queue-password
    secrets:
      - redis-queue-password
    networks:
      - back
    ports:
      - '26380:6379'
    cpus: 1
    mem_reservation: 128M
    mem_limit: 128M
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s

  citus-master:
    container_name: citus_master
    image: "citusdata/citus:12.1.3"
    ports:
      - "26432:5432"
    labels:
      - "com.citusdata.role=Master"
    environment: &CITUS_AUTH
      CITUS_HOST: citus-master
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres-citus-password
      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"
    secrets:
      - postgres-citus-password
    volumes:
      - citus-master:/var/lib/postgresql/data
    networks:
      - db-citus

  citus-worker-1:
    container_name: citus_worker_1
    image: "citusdata/citus:12.1.3"
    labels:
      - "com.citusdata.role=Worker"
    depends_on:
      - citus-manager
    environment: *CITUS_AUTH
    command: "/wait-for-manager.sh"
    secrets:
      - postgres-citus-password
    volumes:
      - healthcheck-volume:/healthcheck
      - citus-worker-1:/var/lib/postgresql/data
    networks:
      - db-citus

  citus-manager:
    container_name: citus_manager
    build:
      context: ./services/postgresql
      dockerfile: citus-manager.Dockerfile
    entrypoint: ["/bin/sh", "-c", "/manager-entrypoint.sh"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - healthcheck-volume:/healthcheck
    depends_on:
      - citus-master
    environment: *CITUS_AUTH
    secrets:
      - postgres-citus-password
    networks:
      - db-citus

  rabbitmq:
    image: bitnami/rabbitmq:4.0
    deploy:
      resources:
        limits:
          memory: 128M
    environment:
      RABBITMQ_USERNAME: rabbit
      RABBITMQ_PASSWORD_FILE: /run/secrets/rabbitmq-password
      RABBITMQ_MANAGEMENT_ALLOW_WEB_ACCESS: true
    volumes:
      - ./services/rabbitmq/enabled-plugins:/opt/bitnami/rabbitmq/etc/rabbitmq/enabled_plugins
    secrets:
      - rabbitmq-password
    networks:
      - back
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s

  ws-server-backend:
    image: bitnami/node:22
    deploy:
      resources:
        limits:
          memory: 128M
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    volumes:
      - ./apps/socket-server:/app
    networks:
      - back
    user: "www-data"
    command: ["node", "./app.js"]
    working_dir: "/app"
    depends_on:
      rabbitmq:
        condition: service_healthy
    labels:
      - traefik.http.routers.ws.rule=PathPrefix(`/`)
      - traefik.enable=1

  user-service:
    build:
      context: apps/user-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/user-service/src:/app/src
      - ./apps/user-service/.env.local:/app/.env.local
    networks:
      - back
      - db
    command: ["deno", "run", "--allow-net", "--allow-env", "--allow-read", "--env-file=.env", "--env-file=.env.local", "src/app.js"]
    healthcheck:
      test: [ "CMD", "deno", "run", "--allow-net=127.0.0.1", "--allow-env=PORT", "--env-file=.env", "--env-file=.env.local", "src/healthcheck.js" ]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      db-haproxy:
        condition: service_started
      citus-master:
        condition: service_healthy

  user-service-manual-1:
    build:
      context: apps/user-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/user-service/src:/app/src
      - ./apps/user-service/.env.local:/app/.env.local
    networks:
      - back
      - db
    command: [ "deno", "run", "--allow-net", "--allow-env", "--allow-read", "--env-file=.env", "--env-file=.env.local", "src/app.js" ]
    healthcheck:
      test: [ "CMD", "deno", "run", "--allow-net=127.0.0.1", "--allow-env=PORT", "--env-file=.env", "--env-file=.env.local", "src/healthcheck.js" ]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      db-haproxy:
        condition: service_started

  user-service-manual-2:
    build:
      context: apps/user-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/user-service/src:/app/src
      - ./apps/user-service/.env.local:/app/.env.local
    networks:
      - back
      - db
    command: ["deno", "run", "--allow-net", "--allow-env", "--allow-read", "--env-file=.env", "--env-file=.env.local", "src/app.js"]
    healthcheck:
      test: [ "CMD", "deno", "run", "--allow-net=127.0.0.1", "--allow-env=PORT", "--env-file=.env", "--env-file=.env.local", "src/healthcheck.js" ]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      db-haproxy:
        condition: service_started

  dialog-service:
    build:
      context: ./apps/dialog-service
      dockerfile: Dockerfile
    environment:
      - "PORT=3000"
      - "DEBUG=app,app.*,api.*,tarantool*"
    init: true
    volumes:
      - ./apps/dialog-service/src:/app/src
      - ./apps/dialog-service/.env.local:/app/.env.local
    networks:
      - back
    command: ["node", "src/app.js"]
    healthcheck:
      test: [ "CMD", "node", "src/healthcheck.js" ]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      tarantool:
        condition: service_healthy
      user-service:
        condition: service_healthy

  traefik:
    image: traefik:3.2
    volumes:
      - ./services/traefik/traefik.yml:/etc/traefik/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - back
    ports:
      - "9002:9002"

  tarantool:
    build:
      dockerfile: ./services/tarantool/Dockerfile
    environment:
     TT_APP_NAME: default
     TT_APP_DIR: /opt/tarantool/apps
     TT_INSTANCE_NAME: instance-01
    networks:
      - back
#    ports:
#      - "23301:3301"
    volumes:
      - tarantool-data:/var/lib/tarantool
      - tarantool-app-data:/srv/tarantool
    healthcheck:
      test: [ "CMD", "status" ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  db-data: ~
  db-data-slave1: ~
  db-data-slave2: ~
  db-data-slave3: ~
  healthcheck-volume: ~
  citus-master: ~
  citus-worker-1: ~
  tarantool-data: ~
  tarantool-app-data: ~

networks:
  front: ~
  back: ~
  db: ~
  db-citus: ~
  traefik: ~

secrets:
  postgresql-password:
    file: ./services/postgresql/password.txt
  postgresql-replication-password:
    file: ./services/postgresql/replication-password.txt
  postgres-citus-password:
    file: ./services/postgresql/citus-password.txt
  redis-cache-password:
    file: ./services/redis/cache-password.txt
  redis-queue-password:
    file: ./services/redis/queue-password.txt
  rabbitmq-password:
    file: ./services/rabbitmq/password.txt
